from flask import Flask, request, jsonify
from functools import wraps
from cryptography.fernet import Fernet
import bcrypt
import time
import logging

app = Flask(__name__)

# Define a dictionary of users and their hashed passwords
users = {
    "user1": bcrypt.hashpw(b"password1", bcrypt.gensalt()),
    "user2": bcrypt.hashpw(b"password2", bcrypt.gensalt()),
    "user3": bcrypt.hashpw(b"password3", bcrypt.gensalt())
}

# Define a dictionary of API endpoints and their required permissions
endpoints = {
    "/public": ["read"],
    "/private": ["read", "write"]
}

# Define a secret key for encryption
key = Fernet.generate_key()
fernet = Fernet(key)

# Define a logger
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
handler = logging.FileHandler('api.log')
handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# Define a decorator for checking authentication and authorization
def auth_required(permissions):
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            # Check if authentication token is present in headers
            if "Authorization" not in request.headers:
                logger.info("Authorization token missing")
                return jsonify({"error": "Authorization token missing"}), 401
            
            # Decrypt and validate authentication token
            token = request.headers["Authorization"]
            try:
                username, password, timestamp = fernet.decrypt(token.encode()).decode().split(":")
            except:
                logger.info("Invalid authorization token")
                return jsonify({"error": "Invalid authorization token"}), 401
            
            if username not in users or not bcrypt.checkpw(password.encode(), users[username]):
                logger.info(f"Invalid username or password: {username}")
                return jsonify({"error": "Invalid username or password"}), 401
            
            # Check if token has expired
            if time.time() - float(timestamp) > 60 * 60:
                logger.info(f"Authorization token expired: {username}")
                return jsonify({"error": "Authorization token expired"}), 401
            
            # Check if user has required permissions for endpoint
            endpoint = request.path
            if endpoint not in endpoints:
                logger.info(f"Endpoint not found: {endpoint}")
                return jsonify({"error": "Endpoint not found"}), 404
            if not set(permissions).issubset(set(endpoints[endpoint])):
                logger.info(f"Insufficient permissions: {username} for endpoint {endpoint}")
                return jsonify({"error": "Insufficient permissions"}), 403
            
            # Call the API endpoint function
            logger.info(f"API endpoint accessed: {endpoint} by user: {username}")
            return func(*args, **kwargs)
        return wrapper
    return decorator

# Define public endpoint
@app.route("/public")
def public():
    return jsonify({"message": "This is a public endpoint"})

# Define private endpoint that requires authentication and read permission
@app.route("/private")
@auth_required(["read"])
def private():
    return jsonify({"message": "This is a private endpoint"})

# Define private endpoint that requires authentication and write permission
@app.route("/write")
@auth_required(["write"])
def write():
    return jsonify({"message": "This is a write endpoint"})

# Define endpoint for generating auth tokens
@app.route("/auth", methods=["POST"])
def auth():
    # Get username and password from request form data
    username = request.form.get("username")
    password = request.form
